package hello.advance.pattern.strategy;
/**
 * 模板模式一般只针对一套算法，注重对同一个算法的不同细节进行抽象提供不同的实现。而策略模式注重多套算法多套实现，在算法中间不应该有交集，
 * 因此算法和算法只间一般不会有冗余代码！因为不同算法只间的实现一般不同。
 * 因此我们可以看到，策略模式的关注点更广，模板模式的关注点更深。而且两种模式可以一起使用，即具体某个策略下可以通过模板减少不同步骤的冗余代码。
 * 举个简单例子，有一个玩游戏的策略类，提供一个playGame的方法，一般而言游戏可以分为Moba类、FPS类、模拟经营类、棋牌类等等，
 * 这些不同类型的游戏可以看作是不同策略，因为他们玩法大不相同。然而针对同一类型下的游戏，又可以在PC、XBox、手机甚至VR体感设备等玩耍。
 * 此时可以提供抽象类提供通用的操作方法，使用抽象方法来引导子类实现。例如Moba类游戏，不管在那个平台上都会有选人，开始游戏。
 * 而FPS类则基本打开游戏就可以直接玩。因此可以针对不同类型游戏提供统一的父类来减少冗余代码。
 *
 * 策略模式关注多种算法，模板模式关注一种算法。策略模式不同策略只间代码很少冗余。
 *
*/